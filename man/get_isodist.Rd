% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/graph_functions.R
\name{get_isodist}
\alias{get_isodist}
\title{Calculate isochrone using Dijkstra's algorithm}
\usage{
get_isodist(Graph, from, lim, cores = 1L)
}
\arguments{
\item{from}{A vector of node IDs representing the starting node(s).}

\item{lim}{A numeric value or vector of values representing the maximum cost(s) of the isochrone.}

\item{cores}{The number of CPU cores to use for parallel computation (if available).}

\item{graph}{A Graph object.}
}
\value{
a data frame with three columns: "start_node" (the starting node), "node"
(a node in the isochrone), and "cost" (the cost of the path from the starting node to the node)
}
\description{
This function calculates the isochrone for a set of starting nodes in a directed
graph using Dijkstra's algorithm. The isochrone is defined as the set of nodes that can be
reached from the starting nodes within a certain cost limit.
}
\examples{
\dontrun{
# Create a graph
from <- c(1, 1, 1, 2, 2, 3, 3, 4, 5, 6, 6, 7)
to <- c(2, 3, 4, 3, 5, 4, 6, 6, 7, 5, 7, 8)
cost <- c(5.6, 3.8, 2.0, 1.2, 6.1, 4.2, 2.5, 7.8, 3.3, 1.7, 6.9, 2.2)

graph <- makegraph(from, to, cost, directed = TRUE, coords = NULL)

# Calculate isochrones for a graph object
isochrones <- get_isodist(graph, from = 2, lim = 10)
}
}
